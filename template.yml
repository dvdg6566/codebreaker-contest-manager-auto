AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  JudgeName:
    Description: "Insert name of Codebreaker Clone"
    Type: "String"
    Default: "codebreakercontest"

Globals:
  Function:
    Timeout: 30
    MemorySize: 1592
    Environment:
      Variables:
        judgeName: !Ref JudgeName
    Handler: lambda_function.lambda_handler
    Runtime: python3.9

Resources:
  ProblemVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 
        Fn::Sub: ${JudgeName}-problem-verification
      CodeUri: lambda-functions/problem-verification
      Policies: 
        - AmazonDynamoDBFullAccess
        - AmazonS3ReadOnlyAccess
  RegradeProblemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${JudgeName}-regrade-problem
      Timeout: 300
      CodeUri: lambda-functions/regrade-problem
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSStepFunctionsFullAccess
  WebsocketInvokeFunction:
    DependsOn: WebSocket
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${JudgeName}-websocket-invoke
      CodeUri: lambda-functions/websocket-invoke
      Policies:
        - AmazonAPIGatewayInvokeFullAccess
        - AmazonDynamoDBReadOnlyAccess
      Environment:
        Variables:
          WebSocketURI:
            Fn::Sub: https://${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/Production
  WebsocketConnectionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${JudgeName}-websocket-connections
      CodeUri: lambda-functions/websocket-connections
      Policies:
        - AmazonDynamoDBFullAccess
  GraderProblemInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${JudgeName}-grader-problem-init
      CodeUri: lambda-functions/grader-problem-init
      Policies:
        - AmazonDynamoDBFullAccess
  GraderProblemScorerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${JudgeName}-grader-problem-scorer
      CodeUri: lambda-functions/grader-problem-scorer
      Policies:
        - AmazonDynamoDBFullAccess
  TestcaseGraderWrapperFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128 # Wrapper function allocated minimal memory to minimise costs
      FunctionName:
        Fn::Sub: ${JudgeName}-testcase-grader-wrapper
      CodeUri: lambda-functions/testcase-grader-wrapper
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaRole
  TestcaseGrader2048Function:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 2590 # Larger memory to accomodate 2048MB Memory limit problems
      FunctionName:
        Fn::Sub: ${JudgeName}-testcase-grader-2048
      CodeUri: lambda-functions/testcase-grader
      Policies:
        - AmazonS3ReadOnlyAccess
  TestcaseGraderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${JudgeName}-testcase-grader
      CodeUri: lambda-functions/testcase-grader
      Policies:
        - AmazonS3ReadOnlyAccess
  AttachmentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${JudgeName}-attachments
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  TestdataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: ${JudgeName}-testdata
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  SubmissionsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: ${JudgeName}-submissions
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: clear-old-compiled
            Prefix: compiled/
            Status: Enabled
            ExpirationInDays: 1
  StatementsBucket:
    Type: AWS::S3::Bucket
    Description: Statements bucket is public to allow statements to be rendered on client-side
    Properties:
      BucketName:
        Fn::Sub: ${JudgeName}-statements
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
  GradersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: ${JudgeName}-graders
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  CheckersBucket: 
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: ${JudgeName}-checkers
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
  WebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name:
        Fn::Sub: ${JudgeName}-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: $connect
      RouteResponseSelectionExpression: '$default'
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WeSocketIntegration
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: $disconnect
      RouteResponseSelectionExpression: '$default'
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WeSocketIntegration
  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: message
      RouteResponseSelectionExpression: '$default'
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WeSocketIntegration
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocket
      RouteKey: $default
      RouteResponseSelectionExpression: '$default'
      AuthorizationType: NONE
      ApiKeyRequired: false
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WeSocketIntegration
  WeSocketIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketConnectionsFunction.Arn}/invocations
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - MessageRoute
    - DisconnectRoute
    - DefaultRoute
    Properties:
      ApiId: !Ref WebSocket
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Production
      Description: Production stage
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocket
Outputs: 
  GatewayEndpoint: 
    Value: 
      Fn::Sub: https://${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/production